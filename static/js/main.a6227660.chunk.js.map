{"version":3,"sources":["images/forest.webp","images/mouse-black-animal.svg","assets/scripts/Menu2.js","assets/scripts/Expire.js","assets/scripts/Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","MyMenu","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","renderMenuItems","state","menuItems","map","item","react_default","a","createElement","className","key","title","href","index_es","isMenuOpen","stateIsOpen","isOpen","setState","BurgerMenu","onStateChange","onClick","customBurgerIcon","src","icon","alt","burgerButtonClassName","pageWrapId","outerContainerId","React","Component","Expire","visible","nextProps","children","setTimer","_timer","clearTimeout","setTimeout","bind","delayShow","delayHide","Header","dist","logo","width","height","App","id","scripts_Expire","Zoom_default","Menu2","scripts_Header","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a6227660.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/forest.5be4ffdb.webp\";","module.exports = __webpack_public_path__ + \"static/media/mouse-black-animal.8c93fd97.svg\";","import { stack as Menu } from 'react-burger-menu';\nimport React from 'react';\nimport icon from '../../images/mouse-black-animal.svg';\nimport '../styles/Menu.css';\nimport \"./Test.css\";\nimport { Favorite, Pets, Schedule, Call, Format_list_numbered, Place, Smoke_free } from '@material-ui/icons';\n\nclass MyMenu extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      menuItems : [],\n      isOpen : false,\n    };\n  }\n  componentDidMount(){\n      this.setState({\n        menuItems : [\n          {\n            href : '#',\n            title : 'Wichtigste Fakten'\n          },\n          {\n            href : '#',\n            title : 'Was ist zu beachten?'\n          },\n          {\n            href : '#',\n            title : 'Kevin Olaf'\n          },\n          {\n            href : '#',\n            title : 'Platzhalter #5'\n          },\n          {\n            href : '#',\n            title : 'Platzhalter #6'\n          },\n          {\n            href : '#',\n            title : 'Platzhalter #7'\n          },\n        ],\n        isOpen : false,\n      });\n  }\n\n  renderMenuItems = (state) => {\n    return this.state.menuItems.map(item => {\n      return <a className=\"menu-item\" key={item.title} href={item.href}><Favorite />{item.title}</a>;\n    });\n  };\n\n  isMenuOpen = (state) => {\n    const stateIsOpen = this.state.isOpen;\n    this.setState({\n      isOpen: !stateIsOpen,\n    });\n    return state.isOpen;\n  }\n\n  render () {\n    return (\n      <Menu\n        onStateChange={ this.isMenuOpen }\n        onClick={ \"\" }\n        customBurgerIcon={ <img src={icon} alt=\"Menu\" /> }\n        burgerButtonClassName={ this.state.isOpen ? 'menuOpen' : '' }\n        pageWrapId={ \"menuPageWrap\" }\n        outerContainerId={ \"menuOuterContainer\" }>\n          {this.renderMenuItems()}\n          <div className=\"menu-header\">Menu</div>\n      </Menu>\n    );\n  }\n}\n\nexport default MyMenu;\n","import React from 'react';\n\nclass Expire extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {visible:false};\n  }\n\n  componentWillReceiveProps(nextProps) {\n    // reset the timer if children are changed\n    if (nextProps.children !== this.props.children) {\n      this.setTimer();\n      // this.setState({visible: true});\n      this.setState({visible: false});\n    }\n  }\n\n  componentDidMount() {\n    this.setTimer();\n  }\n\n  setTimer() {\n    // clear any existing timer\n    if (this._timer != null) {\n      clearTimeout(this._timer)\n    }\n\n    // hide after `delay` milliseconds\n    this._timer = setTimeout(function(){\n      this.setState({visible: true});\n      this._timer = null;\n    }.bind(this), this.props.delayShow);\n\n    this._timer = setTimeout(function(){\n      this.setState({visible: false});\n      this._timer = null;\n    }.bind(this), this.props.delayHide);\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this._timer);\n  }\n\n  render() {\n    return this.state.visible\n      ? <div>{this.props.children}</div>\n      : <span />;\n  }\n}\n\nexport default Expire;\n","import React from 'react';\nimport logo from '../../images/forest.webp';\nimport { BrowserView, MobileView } from \"react-device-detect\";\n\nclass Header extends React.Component {\n  render(){\n    return (\n      <header className=\"App-header\">\n        <div className=\"wrapper\">\n          <BrowserView className=\"browserLogo\">\n            <img src={logo} className=\"App-logo\" width=\"100%\" height=\"100%\" alt=\"logo\" />\n          </BrowserView>\n          <MobileView className=\"mobileLogo\">\n            <img src={logo} className=\"App-logo\" width=\"100%\" height=\"100%\" alt=\"logo\" />\n          </MobileView>\n          <div className=\"overlay\">\n          </div>\n        </div>\n      </header>\n    );\n  }\n}\n\nexport default Header;\n\n// <h1>Mausehochzeit</h1>\n//<h2>Save the Date: 24.08.2019</h2>\n","import React, { Component } from 'react';\nimport './App.css';\nimport './assets/styles/Menu.css';\n// import Button from '@material-ui/core/Button';\n// import Menu from './assets/Menu';\nimport Menu from './assets/scripts/Menu2';\nimport Expire from './assets/scripts/Expire';\nimport Zoom from 'react-reveal/Zoom';\nimport Header from './assets/scripts/Header'\n\nclass App extends Component {\n  render() {\n    return (\n      <div id=\"menuOuterContainer\" className=\"App\">\n        <Expire delayShow={2000} delayHide={10000}>\n          <Zoom>\n            <div className=\"button-text\"><span className=\"button-text-inner\">Mau! Dr√ºck mich</span></div>\n          </Zoom>\n        </Expire>\n        <Menu />\n        <main id=\"menuPageWrap\">\n          <Header />\n          <Zoom>\n           <div className=\"test\">weqwdqwdqwdqwdwqdqwdwqdqwd wq dqwdwqdq wdqwd qwdwq dwqd qwdfewfewfweq</div>\n          </Zoom>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './assets/styles/Menu.css';\nimport './assets/styles/global.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}