{"version":3,"sources":["images/forest.jpg","assets/scripts/Menu2.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Example","react_default","a","createElement","BurgerMenu","className","href","React","Component","App","id","Menu2","isOpen","pageWrapId","outerContainerId","width","src","logo","height","alt","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,0SC0DzBC,mLA9BX,OACEC,EAAAC,EAAAC,cAACC,EAAA,KAAD,KACEH,EAAAC,EAAAC,cAAA,KAAGE,UAAU,YAAYC,KAAK,KAA9B,qBAIAL,EAAAC,EAAAC,cAAA,KAAGE,UAAU,YAAYC,KAAK,YAA9B,WAIAL,EAAAC,EAAAC,cAAA,KAAGE,UAAU,YAAYC,KAAK,WAA9B,wBAIAL,EAAAC,EAAAC,cAAA,KAAGE,UAAU,YAAYC,KAAK,aAA9B,cAIAL,EAAAC,EAAAC,cAAA,KAAGE,UAAU,YAAYC,KAAK,aAA9B,YAIAL,EAAAC,EAAAC,cAAA,KAAGE,UAAU,YAAYC,KAAK,aAA9B,oBAxBcC,IAAMC,WC0BbC,mLA1CX,OACER,EAAAC,EAAAC,cAAA,OAAKO,GAAG,kBAAkBL,UAAU,OAClCJ,EAAAC,EAAAC,cAACQ,EAAD,CAAMC,QAAM,EAACF,GAAK,UAAYL,UAAY,UAAWQ,WAAa,YAAcC,iBAAmB,kBAAoBC,MAAQ,MAC/Hd,EAAAC,EAAAC,cAAA,QAAMO,GAAG,aACPT,EAAAC,EAAAC,cAAA,UAAQE,UAAU,cAChBJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,WACbJ,EAAAC,EAAAC,cAAA,OAAKa,IAAKC,IAAMZ,UAAU,WAAWU,MAAM,OAAOG,OAAO,OAAOC,IAAI,SACpElB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,WACbJ,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,mDAXEK,aCIEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.931d88b5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/forest.ee60a466.jpg\";","import { push as Menu } from 'react-burger-menu';\nimport React, { Component } from 'react';\n\n// export default props => {\n//   return (\n//     // Pass on our props\n//     <Menu {...props}>\n//       <a className=\"menu-item\" href=\"/\">\n//         Wichtigste Fakten\n//       </a>\n//\n//       <a className=\"menu-item\" href=\"/burgers\">\n//         Anfahrt\n//       </a>\n//\n//       <a className=\"menu-item\" href=\"/pizzas\">\n//         Was ist zu beachten?\n//       </a>\n//\n//       <a className=\"menu-item\" href=\"/desserts\">\n//         Kevin Olaf\n//       </a>\n//     </Menu>\n//   );\n// };\n\nclass Example extends React.Component {\n  render () {\n    return (\n      <Menu>\n        <a className=\"menu-item\" href=\"/\">\n          Wichtigste Fakten\n        </a>\n\n        <a className=\"menu-item\" href=\"/burgers\">\n          Anfahrt\n        </a>\n\n        <a className=\"menu-item\" href=\"/pizzas\">\n          Was ist zu beachten?\n        </a>\n\n        <a className=\"menu-item\" href=\"/desserts\">\n          Kevin Olaf\n        </a>\n\n        <a className=\"menu-item\" href=\"/desserts\">\n          Nummer 5\n        </a>\n\n        <a className=\"menu-item\" href=\"/desserts\">\n          Nummer 6\n        </a>\n      </Menu>\n    );\n  }\n}\n\nexport default Example;\n","import React, { Component } from 'react';\nimport logo from './images/forest.jpg';\nimport './App.css';\nimport './assets/styles/Menu.css';\nimport Button from '@material-ui/core/Button';\n// import Menu from './assets/Menu';\nimport Menu from './assets/scripts/Menu2';\n\nclass App extends Component {\n  render() {\n    return (\n      <div id=\"outer-container\" className=\"App\">\n        <Menu isOpen id={ \"sidebar\" } className={ \"my-menu\" }pageWrapId={ \"page-wrap\" } outerContainerId={ \"outer-container\" } width={ 300 }/>\n        <main id=\"page-wrap\">\n          <header className=\"App-header\">\n            <div className=\"wrapper\">\n              <img src={logo} className=\"App-logo\" width=\"100%\" height=\"100%\" alt=\"logo\" />\n              <div className=\"overlay\">\n                <h1>Mausehochzeit</h1>\n                <h2>Save the Date: 24.08.2019</h2>\n              </div>\n            </div>\n          </header>\n        </main>\n      </div>\n    );\n  }\n}\n\n// class App extends Component {\n//   render() {\n//     return (\n//       <div className=\"App\">\n//         <header className=\"App-header\">\n//           <Menu />\n//           <div className=\"wrapper\">\n//             <img src={logo} className=\"App-logo\" width=\"100%\" height=\"100%\" alt=\"logo\" />\n//             <div className=\"overlay\">\n//               <h1>Mausehochzeit</h1>\n//               <h2>Save the Date: 31.08.2019</h2>\n//             </div>\n//           </div>\n//         </header>\n//         <div id=\"root\"></div>\n//         <Button variant=\"contained\" color=\"primary\">\n//           Hello World\n//         </Button>\n//       </div>\n//     );\n//   }\n// }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './assets/styles/Menu.css';\nimport './assets/styles/global.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}